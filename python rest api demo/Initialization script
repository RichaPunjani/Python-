from flask import Flask
from flask_restful import Resource, Api, reqparse
import pandas as pd
import ast

app = Flask(__name__)
api = Api(app)

class Users(Resource):
    #methods for get, post, etc
    def post(self):
        parser=reqparse.RequestParser()
        parser.add_argument('userId',required=True)        # add new argument to parser
        parser.add_argument('name',required=True)
        parser.add_argument('city',required=True)
        args=parser.parse_args()
        data = pd.read_csv('users.csv')

        if args['userId'] in list(data['userId']):
            return {
                       'message': f"'{args['userId']}' already exists."
                   }, 401
        new_data=pd.DataFrame({
            'userId':args['userId'],
            'name':args['name'],
            'city':args['city'],
            'locations':[[]]
        })                                                  # create new data dictionary to be addded

        data=pd.read_csv('users.csv')                       # read csv file

        data=data.append(new_data,ignore_index=True)        # append new data to data

        data.to_csv('users.csv',index=False)                # save data as csv

        return {'data': data.to_dict()}, 200                # return data dictionary with updated value

    def put(self):
        parser = reqparse.RequestParser()  # initialize
        parser.add_argument('userId', required=True)  # add args
        parser.add_argument('location', required=True)
        args = parser.parse_args()  # parse arguments to dictionary

        # read our CSV
        data = pd.read_csv('users.csv')

        if args['userId'] in list(data['userId']):
            # evaluate strings of lists to lists
            data['locations'] = data['locations'].apply(
                lambda x: ast.literal_eval(x)
            )



            user_data = data[data['userId'] == args['userId']]
            user_data['locations'] = user_data['locations'].values[0] \
                .append(args['location'])

            # save back to CSV
            data.to_csv('users.csv', index=False)
            # return data and 200 OK
            return {'data': data.to_dict()}, 200

        else:
            # otherwise the userId does not exist
            return {
                       'message': f"'{args['userId']}' user not found."
                   }, 404

    def get(self):
        data=pd.read_csv("users.csv")                       # read the csv file
        data=data.to_dict()                                 # convert data to dictionary
        return {'data':data},200                            # send data and 200 ok
    pass

class Locations(Resource):
    #methods for get, post, delete, etc

    pass



api.add_resource(Users, '/users')                           #entry point for user
api.add_resource(Locations,'/locations')                    #entry point for location

if __name__ == '__main__':
    app.run()                                               # run our Flask app